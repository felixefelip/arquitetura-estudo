module Marketing
  module Lead
    class Entity < ::Marketing::ApplicationRecord
      extend _ActiveRecord_Relation_ClassMethods[Marketing::Lead::Entity, ActiveRecord_Relation, Integer]

      module GeneratedAttributeMethods
        def id: () -> Integer

        def id=: (Integer) -> Integer

        def id?: () -> bool

        def id_changed?: () -> bool

        def id_change: () -> [ Integer?, Integer? ]

        def id_will_change!: () -> void

        def id_was: () -> Integer?

        def id_previously_changed?: () -> bool

        def id_previous_change: () -> Array[Integer?]?

        def id_previously_was: () -> Integer?

        def id_before_last_save: () -> Integer?

        def id_change_to_be_saved: () -> Array[Integer?]?

        def id_in_database: () -> Integer?

        def saved_change_to_id: () -> Array[Integer?]?

        def saved_change_to_id?: () -> bool

        def will_save_change_to_id?: () -> bool

        def restore_id!: () -> void

        def clear_id_change: () -> void

        def full_name: () -> String?

        def full_name=: (String?) -> String?

        def full_name?: () -> bool

        def full_name_changed?: () -> bool

        def full_name_change: () -> [ String?, String? ]

        def full_name_will_change!: () -> void

        def full_name_was: () -> String?

        def full_name_previously_changed?: () -> bool

        def full_name_previous_change: () -> Array[String?]?

        def full_name_previously_was: () -> String?

        def full_name_before_last_save: () -> String?

        def full_name_change_to_be_saved: () -> Array[String?]?

        def full_name_in_database: () -> String?

        def saved_change_to_full_name: () -> Array[String?]?

        def saved_change_to_full_name?: () -> bool

        def will_save_change_to_full_name?: () -> bool

        def restore_full_name!: () -> void

        def clear_full_name_change: () -> void

        def email: () -> String?

        def email=: (String?) -> String?

        def email?: () -> bool

        def email_changed?: () -> bool

        def email_change: () -> [ String?, String? ]

        def email_will_change!: () -> void

        def email_was: () -> String?

        def email_previously_changed?: () -> bool

        def email_previous_change: () -> Array[String?]?

        def email_previously_was: () -> String?

        def email_before_last_save: () -> String?

        def email_change_to_be_saved: () -> Array[String?]?

        def email_in_database: () -> String?

        def saved_change_to_email: () -> Array[String?]?

        def saved_change_to_email?: () -> bool

        def will_save_change_to_email?: () -> bool

        def restore_email!: () -> void

        def clear_email_change: () -> void

        def created_at: () -> ActiveSupport::TimeWithZone

        def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

        def created_at?: () -> bool

        def created_at_changed?: () -> bool

        def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

        def created_at_will_change!: () -> void

        def created_at_was: () -> ActiveSupport::TimeWithZone?

        def created_at_previously_changed?: () -> bool

        def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

        def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

        def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

        def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

        def created_at_in_database: () -> ActiveSupport::TimeWithZone?

        def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

        def saved_change_to_created_at?: () -> bool

        def will_save_change_to_created_at?: () -> bool

        def restore_created_at!: () -> void

        def clear_created_at_change: () -> void

        def updated_at: () -> ActiveSupport::TimeWithZone

        def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

        def updated_at?: () -> bool

        def updated_at_changed?: () -> bool

        def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

        def updated_at_will_change!: () -> void

        def updated_at_was: () -> ActiveSupport::TimeWithZone?

        def updated_at_previously_changed?: () -> bool

        def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

        def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

        def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

        def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

        def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

        def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

        def saved_change_to_updated_at?: () -> bool

        def will_save_change_to_updated_at?: () -> bool

        def restore_updated_at!: () -> void

        def clear_updated_at_change: () -> void

        def status: () -> Integer?

        def status=: (Integer?) -> Integer?

        def status?: () -> bool

        def status_changed?: () -> bool

        def status_change: () -> [ Integer?, Integer? ]

        def status_will_change!: () -> void

        def status_was: () -> Integer?

        def status_previously_changed?: () -> bool

        def status_previous_change: () -> Array[Integer?]?

        def status_previously_was: () -> Integer?

        def status_before_last_save: () -> Integer?

        def status_change_to_be_saved: () -> Array[Integer?]?

        def status_in_database: () -> Integer?

        def saved_change_to_status: () -> Array[Integer?]?

        def saved_change_to_status?: () -> bool

        def will_save_change_to_status?: () -> bool

        def restore_status!: () -> void

        def clear_status_change: () -> void
      end
      include GeneratedAttributeMethods

      module GeneratedAssociationMethods
      end
      include GeneratedAssociationMethods

      module GeneratedRelationMethods
      end

      class ActiveRecord_Relation < ::ActiveRecord::Relation
        include GeneratedRelationMethods
        include _ActiveRecord_Relation[Marketing::Lead::Entity, Integer]
        include Enumerable[Marketing::Lead::Entity]
      end

      class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
        include GeneratedRelationMethods
        include _ActiveRecord_Relation[Marketing::Lead::Entity, Integer]
      end
    end
  end
end
